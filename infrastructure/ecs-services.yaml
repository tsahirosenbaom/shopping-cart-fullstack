AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Services for Shopping Cart System"

Parameters:
  ProjectName:
    Type: String
    Default: shopping-cart-system
  DotNetImageURI:
    Type: String
    Description: URI of the .NET API Docker image
  NodeJsImageURI:
    Type: String
    Description: URI of the Node.js API Docker image

Resources:
  # .NET API Task Definition
  DotNetTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-dotnet-api
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${ProjectName}-execution-role-arn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${ProjectName}-task-role-arn
      ContainerDefinitions:
        - Name: dotnet-api
          Image: !Ref DotNetImageURI
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DotNetLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: Production
            - Name: ASPNETCORE_URLS
              Value: http://+:80
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:80/api/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Node.js API Task Definition
  NodeJsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${ProjectName}-nodejs-api
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ${ProjectName}-execution-role-arn
      TaskRoleArn:
        Fn::ImportValue: !Sub ${ProjectName}-task-role-arn
      ContainerDefinitions:
        - Name: nodejs-api
          Image: !Ref NodeJsImageURI
          PortMappings:
            - ContainerPort: 3001
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref NodeJsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: "3001"
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:3001/api/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # CloudWatch Log Groups
  DotNetLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-dotnet-api
      RetentionInDays: 7

  NodeJsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ProjectName}-nodejs-api
      RetentionInDays: 7

  # .NET API Service
  DotNetService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-dotnet-api
      Cluster:
        Fn::ImportValue: !Sub ${ProjectName}-cluster
      TaskDefinition: !Ref DotNetTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ProjectName}-ecs-sg-id
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-public-subnet-1-id
            - Fn::ImportValue: !Sub ${ProjectName}-public-subnet-2-id
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: dotnet-api
          ContainerPort: 80
          TargetGroupArn:
            Fn::ImportValue: !Sub ${ProjectName}-dotnet-tg-arn
      HealthCheckGracePeriodSeconds: 300

  # Node.js API Service
  NodeJsService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${ProjectName}-nodejs-api
      Cluster:
        Fn::ImportValue: !Sub ${ProjectName}-cluster
      TaskDefinition: !Ref NodeJsTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - Fn::ImportValue: !Sub ${ProjectName}-ecs-sg-id
          Subnets:
            - Fn::ImportValue: !Sub ${ProjectName}-public-subnet-1-id
            - Fn::ImportValue: !Sub ${ProjectName}-public-subnet-2-id
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: nodejs-api
          ContainerPort: 3001
          TargetGroupArn:
            Fn::ImportValue: !Sub ${ProjectName}-nodejs-tg-arn
      HealthCheckGracePeriodSeconds: 300

Outputs:
  DotNetServiceName:
    Description: .NET API Service Name
    Value: !Ref DotNetService
    Export:
      Name: !Sub ${ProjectName}-dotnet-service

  NodeJsServiceName:
    Description: Node.js API Service Name
    Value: !Ref NodeJsService
    Export:
      Name: !Sub ${ProjectName}-nodejs-service

  DotNetTaskDefinitionArn:
    Description: .NET Task Definition ARN
    Value: !Ref DotNetTaskDefinition
    Export:
      Name: !Sub ${ProjectName}-dotnet-task-def-arn

  NodeJsTaskDefinitionArn:
    Description: Node.js Task Definition ARN
    Value: !Ref NodeJsTaskDefinition
    Export:
      Name: !Sub ${ProjectName}-nodejs-task-def-arn
